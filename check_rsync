#!/usr/bin/env perl

use strict;
use warnings;
use v5;

use Getopt::Long;
use IO::Socket::INET;

sub print_help;

my $remote = '';

my $show_help = 0;

my $timeout = 30;
my $rsync_port = 873;

my $socket_ok = 1;
my $rsync_out = '';

my $args_ok = GetOptions ('remote-host=s' => \$remote,
                          'timeout=s' => \$timeout,
                          'remote-port=s' => \$rsync_port,
                          'help' => \$show_help);

print_help if $show_help;

print_help if not $remote or not $args_ok;

my $socket = IO::Socket::INET->new (
               Proto => 'tcp',
               Timeout => $timeout,
               PeerAddr => $remote,
               PeerPort => $rsync_port) or $socket_ok = 0;

if ($socket and $socket_ok) {

  $socket->autoflush(1);

  print $socket "\015\012";

  $rsync_out = <$socket>;

  chomp $rsync_out;

  if ($rsync_out =~ m/^\@RSYNCD:/) {

    print "OK - $rsync_out\n";

    exit 0;

  } else {

    print "WARNING - rsync out: $rsync_out\n";

    exit 1;

  }

} else {

  print "CRITICAL - Could not connect to ${remote}:${rsync_port}\n";

  exit 2;

}

print "UNKNOW - Plugin internal error\n";

exit 3;


sub print_help {

  print "HELP!!!\n";

  print STDERR <<EOH;
Usage: $0 [options]

Options:
  * --remote-host IP/Hostname - IP or hostname of the remote host
    --remote-port number      - Remote port where rsyncd is listening.
                                Default to 873.
    --timeout seconds         - Number of seconds before time out the
                                connection. Default to 30.
    --help                    - This very nice and useful explanation =)

Options marked with * are required
EOH

  exit 2;

}
